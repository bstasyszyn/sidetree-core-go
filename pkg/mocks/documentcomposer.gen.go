// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
	"github.com/trustbloc/sidetree-core-go/pkg/document"
	"github.com/trustbloc/sidetree-core-go/pkg/patch"
)

type DocumentComposer struct {
	ApplyPatchesStub        func(doc document.Document, patches []patch.Patch) (document.Document, error)
	applyPatchesMutex       sync.RWMutex
	applyPatchesArgsForCall []struct {
		doc     document.Document
		patches []patch.Patch
	}
	applyPatchesReturns struct {
		result1 document.Document
		result2 error
	}
	applyPatchesReturnsOnCall map[int]struct {
		result1 document.Document
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DocumentComposer) ApplyPatches(doc document.Document, patches []patch.Patch) (document.Document, error) {
	var patchesCopy []patch.Patch
	if patches != nil {
		patchesCopy = make([]patch.Patch, len(patches))
		copy(patchesCopy, patches)
	}
	fake.applyPatchesMutex.Lock()
	ret, specificReturn := fake.applyPatchesReturnsOnCall[len(fake.applyPatchesArgsForCall)]
	fake.applyPatchesArgsForCall = append(fake.applyPatchesArgsForCall, struct {
		doc     document.Document
		patches []patch.Patch
	}{doc, patchesCopy})
	fake.recordInvocation("ApplyPatches", []interface{}{doc, patchesCopy})
	fake.applyPatchesMutex.Unlock()
	if fake.ApplyPatchesStub != nil {
		return fake.ApplyPatchesStub(doc, patches)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyPatchesReturns.result1, fake.applyPatchesReturns.result2
}

func (fake *DocumentComposer) ApplyPatchesCallCount() int {
	fake.applyPatchesMutex.RLock()
	defer fake.applyPatchesMutex.RUnlock()
	return len(fake.applyPatchesArgsForCall)
}

func (fake *DocumentComposer) ApplyPatchesArgsForCall(i int) (document.Document, []patch.Patch) {
	fake.applyPatchesMutex.RLock()
	defer fake.applyPatchesMutex.RUnlock()
	return fake.applyPatchesArgsForCall[i].doc, fake.applyPatchesArgsForCall[i].patches
}

func (fake *DocumentComposer) ApplyPatchesReturns(result1 document.Document, result2 error) {
	fake.ApplyPatchesStub = nil
	fake.applyPatchesReturns = struct {
		result1 document.Document
		result2 error
	}{result1, result2}
}

func (fake *DocumentComposer) ApplyPatchesReturnsOnCall(i int, result1 document.Document, result2 error) {
	fake.ApplyPatchesStub = nil
	if fake.applyPatchesReturnsOnCall == nil {
		fake.applyPatchesReturnsOnCall = make(map[int]struct {
			result1 document.Document
			result2 error
		})
	}
	fake.applyPatchesReturnsOnCall[i] = struct {
		result1 document.Document
		result2 error
	}{result1, result2}
}

func (fake *DocumentComposer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyPatchesMutex.RLock()
	defer fake.applyPatchesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DocumentComposer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocol.DocumentComposer = new(DocumentComposer)
