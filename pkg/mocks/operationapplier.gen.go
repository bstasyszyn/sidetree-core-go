// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	batchapi "github.com/trustbloc/sidetree-core-go/pkg/api/batch"
	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
)

type OperationApplier struct {
	ApplyCreateOperationStub        func(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error)
	applyCreateOperationMutex       sync.RWMutex
	applyCreateOperationArgsForCall []struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}
	applyCreateOperationReturns struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	applyCreateOperationReturnsOnCall map[int]struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	ApplyUpdateOperationStub        func(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error)
	applyUpdateOperationMutex       sync.RWMutex
	applyUpdateOperationArgsForCall []struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}
	applyUpdateOperationReturns struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	applyUpdateOperationReturnsOnCall map[int]struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	ApplyDeactivateOperationStub        func(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error)
	applyDeactivateOperationMutex       sync.RWMutex
	applyDeactivateOperationArgsForCall []struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}
	applyDeactivateOperationReturns struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	applyDeactivateOperationReturnsOnCall map[int]struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	ApplyRecoverOperationStub        func(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error)
	applyRecoverOperationMutex       sync.RWMutex
	applyRecoverOperationArgsForCall []struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}
	applyRecoverOperationReturns struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	applyRecoverOperationReturnsOnCall map[int]struct {
		result1 *protocol.ResolutionModel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationApplier) ApplyCreateOperation(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error) {
	fake.applyCreateOperationMutex.Lock()
	ret, specificReturn := fake.applyCreateOperationReturnsOnCall[len(fake.applyCreateOperationArgsForCall)]
	fake.applyCreateOperationArgsForCall = append(fake.applyCreateOperationArgsForCall, struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}{op, rm})
	fake.recordInvocation("ApplyCreateOperation", []interface{}{op, rm})
	fake.applyCreateOperationMutex.Unlock()
	if fake.ApplyCreateOperationStub != nil {
		return fake.ApplyCreateOperationStub(op, rm)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyCreateOperationReturns.result1, fake.applyCreateOperationReturns.result2
}

func (fake *OperationApplier) ApplyCreateOperationCallCount() int {
	fake.applyCreateOperationMutex.RLock()
	defer fake.applyCreateOperationMutex.RUnlock()
	return len(fake.applyCreateOperationArgsForCall)
}

func (fake *OperationApplier) ApplyCreateOperationArgsForCall(i int) (*batchapi.AnchoredOperation, *protocol.ResolutionModel) {
	fake.applyCreateOperationMutex.RLock()
	defer fake.applyCreateOperationMutex.RUnlock()
	return fake.applyCreateOperationArgsForCall[i].op, fake.applyCreateOperationArgsForCall[i].rm
}

func (fake *OperationApplier) ApplyCreateOperationReturns(result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyCreateOperationStub = nil
	fake.applyCreateOperationReturns = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyCreateOperationReturnsOnCall(i int, result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyCreateOperationStub = nil
	if fake.applyCreateOperationReturnsOnCall == nil {
		fake.applyCreateOperationReturnsOnCall = make(map[int]struct {
			result1 *protocol.ResolutionModel
			result2 error
		})
	}
	fake.applyCreateOperationReturnsOnCall[i] = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyUpdateOperation(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error) {
	fake.applyUpdateOperationMutex.Lock()
	ret, specificReturn := fake.applyUpdateOperationReturnsOnCall[len(fake.applyUpdateOperationArgsForCall)]
	fake.applyUpdateOperationArgsForCall = append(fake.applyUpdateOperationArgsForCall, struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}{op, rm})
	fake.recordInvocation("ApplyUpdateOperation", []interface{}{op, rm})
	fake.applyUpdateOperationMutex.Unlock()
	if fake.ApplyUpdateOperationStub != nil {
		return fake.ApplyUpdateOperationStub(op, rm)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyUpdateOperationReturns.result1, fake.applyUpdateOperationReturns.result2
}

func (fake *OperationApplier) ApplyUpdateOperationCallCount() int {
	fake.applyUpdateOperationMutex.RLock()
	defer fake.applyUpdateOperationMutex.RUnlock()
	return len(fake.applyUpdateOperationArgsForCall)
}

func (fake *OperationApplier) ApplyUpdateOperationArgsForCall(i int) (*batchapi.AnchoredOperation, *protocol.ResolutionModel) {
	fake.applyUpdateOperationMutex.RLock()
	defer fake.applyUpdateOperationMutex.RUnlock()
	return fake.applyUpdateOperationArgsForCall[i].op, fake.applyUpdateOperationArgsForCall[i].rm
}

func (fake *OperationApplier) ApplyUpdateOperationReturns(result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyUpdateOperationStub = nil
	fake.applyUpdateOperationReturns = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyUpdateOperationReturnsOnCall(i int, result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyUpdateOperationStub = nil
	if fake.applyUpdateOperationReturnsOnCall == nil {
		fake.applyUpdateOperationReturnsOnCall = make(map[int]struct {
			result1 *protocol.ResolutionModel
			result2 error
		})
	}
	fake.applyUpdateOperationReturnsOnCall[i] = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyDeactivateOperation(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error) {
	fake.applyDeactivateOperationMutex.Lock()
	ret, specificReturn := fake.applyDeactivateOperationReturnsOnCall[len(fake.applyDeactivateOperationArgsForCall)]
	fake.applyDeactivateOperationArgsForCall = append(fake.applyDeactivateOperationArgsForCall, struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}{op, rm})
	fake.recordInvocation("ApplyDeactivateOperation", []interface{}{op, rm})
	fake.applyDeactivateOperationMutex.Unlock()
	if fake.ApplyDeactivateOperationStub != nil {
		return fake.ApplyDeactivateOperationStub(op, rm)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyDeactivateOperationReturns.result1, fake.applyDeactivateOperationReturns.result2
}

func (fake *OperationApplier) ApplyDeactivateOperationCallCount() int {
	fake.applyDeactivateOperationMutex.RLock()
	defer fake.applyDeactivateOperationMutex.RUnlock()
	return len(fake.applyDeactivateOperationArgsForCall)
}

func (fake *OperationApplier) ApplyDeactivateOperationArgsForCall(i int) (*batchapi.AnchoredOperation, *protocol.ResolutionModel) {
	fake.applyDeactivateOperationMutex.RLock()
	defer fake.applyDeactivateOperationMutex.RUnlock()
	return fake.applyDeactivateOperationArgsForCall[i].op, fake.applyDeactivateOperationArgsForCall[i].rm
}

func (fake *OperationApplier) ApplyDeactivateOperationReturns(result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyDeactivateOperationStub = nil
	fake.applyDeactivateOperationReturns = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyDeactivateOperationReturnsOnCall(i int, result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyDeactivateOperationStub = nil
	if fake.applyDeactivateOperationReturnsOnCall == nil {
		fake.applyDeactivateOperationReturnsOnCall = make(map[int]struct {
			result1 *protocol.ResolutionModel
			result2 error
		})
	}
	fake.applyDeactivateOperationReturnsOnCall[i] = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyRecoverOperation(op *batchapi.AnchoredOperation, rm *protocol.ResolutionModel) (*protocol.ResolutionModel, error) {
	fake.applyRecoverOperationMutex.Lock()
	ret, specificReturn := fake.applyRecoverOperationReturnsOnCall[len(fake.applyRecoverOperationArgsForCall)]
	fake.applyRecoverOperationArgsForCall = append(fake.applyRecoverOperationArgsForCall, struct {
		op *batchapi.AnchoredOperation
		rm *protocol.ResolutionModel
	}{op, rm})
	fake.recordInvocation("ApplyRecoverOperation", []interface{}{op, rm})
	fake.applyRecoverOperationMutex.Unlock()
	if fake.ApplyRecoverOperationStub != nil {
		return fake.ApplyRecoverOperationStub(op, rm)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.applyRecoverOperationReturns.result1, fake.applyRecoverOperationReturns.result2
}

func (fake *OperationApplier) ApplyRecoverOperationCallCount() int {
	fake.applyRecoverOperationMutex.RLock()
	defer fake.applyRecoverOperationMutex.RUnlock()
	return len(fake.applyRecoverOperationArgsForCall)
}

func (fake *OperationApplier) ApplyRecoverOperationArgsForCall(i int) (*batchapi.AnchoredOperation, *protocol.ResolutionModel) {
	fake.applyRecoverOperationMutex.RLock()
	defer fake.applyRecoverOperationMutex.RUnlock()
	return fake.applyRecoverOperationArgsForCall[i].op, fake.applyRecoverOperationArgsForCall[i].rm
}

func (fake *OperationApplier) ApplyRecoverOperationReturns(result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyRecoverOperationStub = nil
	fake.applyRecoverOperationReturns = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) ApplyRecoverOperationReturnsOnCall(i int, result1 *protocol.ResolutionModel, result2 error) {
	fake.ApplyRecoverOperationStub = nil
	if fake.applyRecoverOperationReturnsOnCall == nil {
		fake.applyRecoverOperationReturnsOnCall = make(map[int]struct {
			result1 *protocol.ResolutionModel
			result2 error
		})
	}
	fake.applyRecoverOperationReturnsOnCall[i] = struct {
		result1 *protocol.ResolutionModel
		result2 error
	}{result1, result2}
}

func (fake *OperationApplier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyCreateOperationMutex.RLock()
	defer fake.applyCreateOperationMutex.RUnlock()
	fake.applyUpdateOperationMutex.RLock()
	defer fake.applyUpdateOperationMutex.RUnlock()
	fake.applyDeactivateOperationMutex.RLock()
	defer fake.applyDeactivateOperationMutex.RUnlock()
	fake.applyRecoverOperationMutex.RLock()
	defer fake.applyRecoverOperationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationApplier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocol.OperationApplier = new(OperationApplier)
